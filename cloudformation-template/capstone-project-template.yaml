AWSTemplateFormatVersion: 2010-09-09
Description: CUR-TF-200-ACACAD-3 Lab Project

Parameters:

  LatestAL2023AmiId:
    Description: Latest EC2 Amazon Linux 2023 AMI from Systems Manager Parameter Store
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

  KeyName:
    Type: String
    Description: vockey labsuser.pem (same thing)
    Default: default-lab-key

Resources:

###########
# LabVPC with 2 Internet Gateway
# Layer Type: Network Layer
###########

  LabVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Project VPC

  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Project IGW

  VPCtoIGWConnection:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - IGW
      - LabVPC
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref LabVPC

  # A NAT Gateway:
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIPAddress
    Properties:
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet1
      Tags:
      - Key: Name
        Value: !Sub Lab-NATGW
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    DependsOn: LabVPC
    Properties:
      Domain: vpc

  ###########
  # A NAT Gateway in Public Subnet 2: (added on 31/07/2024)
  ###########
  
  NATGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: ElasticIPAddress2
    Properties:
      AllocationId: !GetAtt ElasticIPAddress2.AllocationId
      ConnectivityType: public
      SubnetId: !Ref PublicSubnet2
      Tags:
      - Key: Name
        Value: !Sub Lab-NATGW2
  ElasticIPAddress2:
    Type: AWS::EC2::EIP
    DependsOn: LabVPC
    Properties:
      Domain: vpc

###########
# Private App Subnets x 2
# Layer Type: Network Layer
###########

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private Subnet 2


###########
# Public Route Table
# Layer Type: Network Layer
###########

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - PublicRouteTable
      - VPCtoIGWConnection
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable

###########
# Private Route Table App
# Layer Type: Network Layer
###########

  PrivateRouteTableApp:
    Type: AWS::EC2::RouteTable
    DependsOn:
      - LabVPC
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Private Route Table App

  PrivateRouteApp:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    DependsOn:
      - PrivateRouteTableApp
      - NATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTableApp
      DestinationCidrBlock: 0.0.0.0/0
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway

  PrivateRouteApp2:            # Private route table can access web via NAT (created below)
    Type: AWS::EC2::Route
    DependsOn:
      - PrivateRouteTableApp
      - NATGateway2
    Properties:
      RouteTableId: !Ref PrivateRouteTableApp
      DestinationCidrBlock: 0.0.0.0/24
      # Route traffic through the NAT Gateway:
      NatGatewayId: !Ref NATGateway2


###########
# Private DB Route Table
# Layer Type: Network Layer
###########

  PrivateRouteTableDB:
    Type: AWS::EC2::RouteTable
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      Tags:
        - Key: Name
          Value: Private DB Route Table


###########
# Public Subnets x 2
# Layer Type: Network Layer
###########

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet1
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PublicRouteTable
      - PublicSubnet2
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTableApp
      - PrivateSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTableApp
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTableApp
      - PrivateSubnet2
      - NATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTableApp
      SubnetId: !Ref PrivateSubnet2


###########
# Private DB Subnets x 2
# Layer Type: Network Layer
###########

  PrivateDBSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private DB Subnet 1

  PrivateDBSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: LabVPC
    Properties:
      VpcId: !Ref LabVPC
      CidrBlock: 10.0.6.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
      Tags:
        - Key: Name
          Value: Private DB Subnet 2

  PrivateRouteTableAssociationDB1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTableDB
      - PrivateDBSubnet1
    Properties:
      RouteTableId: !Ref PrivateRouteTableDB
      SubnetId: !Ref PrivateDBSubnet1

  PrivateRouteTableAssociationDB2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - PrivateRouteTableDB
      - PrivateDBSubnet2
    Properties:
      RouteTableId: !Ref PrivateRouteTableDB
      SubnetId: !Ref PrivateDBSubnet2

##########
# Application Load Balancer (added on 31/07/2024) 
# Layer Type: Network Layer
##########
  
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: app-LB
      Scheme: internet-facing
      IpAddressType: ipv4 
      SecurityGroups: 
        - !GetAtt ALBSecurityGroup.GroupId
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application


# Need to configure listeners for the application load balancer
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ApplicationLoadBalancer
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

# Need to configure Target Group for ApplicationLoadBalancer
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LabVPC
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref LabVPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2


###########
# IAM Role for App
# Layer Type: Security Layer
###########

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref AppRole]
      InstanceProfileName: Inventory-App-Role

  AppRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Inventory-App-Role
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: secretsaccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                      - secretsmanager:CreateSecret
                      - secretsmanager:GetSecretValue
                      - secretsmanager:DescribeSecret
                      - secretsmanager:PutSecretValue
                      - secretsmanager:ListSecrets
                      - secretsmanager:UpdateSecret
                Resource: !Sub arn:aws:secretsmanager:*:${AWS::AccountId}:secret:*

###########
# ALB Security Group
# Layer Type: Security Layer
###########

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LabVPC
    Properties:
      GroupName: ALBSG
      GroupDescription: Port 80
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALBSG

###########
# App Security Group
# Layer Type: Security Layer
###########

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LabVPC
    Properties:
      GroupName: Inventory-App
      GroupDescription: Enable access to App
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: Inventory-App

###########
# DB Security Group
# Layer Type: Security Layer
###########

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: LabVPC
    Properties:
      GroupName: ExampleDB-SG
      GroupDescription: Enable access to MySQL
      VpcId: !Ref LabVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSecurityGroup
      Tags:
        - Key: Name
          Value: ExampleD-BSG

## Create DB subnet group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Example-DB-subnet-group
      SubnetIds: [ !Ref PrivateDBSubnet1, !Ref PrivateDBSubnet2 ]
      Tags:
        - Key: Name
          Value: Example-DB-subnet-group









##########
# Launch template
# Layer Type: Compute Layer
##########

  ExampleLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        InstanceType: t2.micro
#        KeyName: !Ref KeyName
        ImageId: !Ref LatestAL2023AmiId
        TagSpecifications:
          - ResourceType: instance
            Tags:
            - Key: Name
              Value: ExampleAPP
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
            - InstanceProfile
            - Arn
        SecurityGroupIds:
            - !Ref AppSecurityGroup
        UserData:
          Fn::Base64: !Sub |
             #!/bin/bash -ex
              dnf -y update
              dnf -y install php8.2
              dnf -y install mariadb105-server
              dnf install -y php-mysqli
              cd /var/www/html/
              wget https://docs.aws.amazon.com/aws-sdk-php/v3/download/aws.zip
              unzip aws -d /var/www/html
              wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACACAD-3-113230/22-lab-Capstone-project/s3/Example.zip
              #wget https://aws-tc-largeobjects.s3-us-west-2.amazonaws.com/CUR-TF-200-ACACAD-3-89090/22-lab-course-project/s3/Example.zip
              unzip Example.zip
              chkconfig httpd on
              service httpd start
              #wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACACAD-2/21-course-project/s3/Countrydatadump.sql
              #chown ec2-user:ec2-user Countrydatadump.sql
              #cd /var/www/html
             #wget https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-200-ACACAD-2/21-course-project/s3/Project.zip
             #unzip Project.zip -d /var/www/html/
              chown -R ec2-user:ec2-user /var/www/html
      LaunchTemplateName: Project-LT




Outputs:
  LoadBalancerDNS:
    Description: The DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName